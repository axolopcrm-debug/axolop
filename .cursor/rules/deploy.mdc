---
alwaysApply: true
---

# Deploy Workflow Rules

## When user says "deploy", execute these steps in order:

### 1. Commit Changes
- Add all modified files to git staging
- Commit with descriptive message about the changes made
- Use format: "Description of changes - Brief summary"

### 2. Update GitHub
- Push all committed changes to GitHub remote repository
- Ensure main branch is updated with latest changes

### 3. Update GitHub Release
- Create a new GitHub release with version number
- Use semantic versioning (e.g., v1.2.3)
- Include changelog of what was fixed/added
- Tag the release appropriately

### 4. Make Git Backup
- Create timestamped backup folder: `git backups/YYYYMMDD-HHMMSS-deploy-backup/`
- Generate complete repository bundle
- Include commit history, git status, and backup info
- Store in `git backups/` directory

## Backup Naming Convention
- Format: `YYYYMMDD-HHMMSS-deploy-backup`
- Example: `20251003-235125-deploy-backup`
- Always include "deploy-backup" in the name

## Required Files in Each Backup
- `complete-repo.bundle` - Complete repository bundle
- `commit-history.txt` - Full commit history
- `git-status.txt` - Current git status
- `backup-info.txt` - Backup metadata with timestamp and description

## Execution Order
1. ✅ Commit changes
2. ✅ Push to GitHub
3. ✅ Create GitHub release
4. ✅ Generate git backup
5. ✅ Confirm all steps completed

## Notes
- Always check git status before committing
- Use meaningful commit messages
- Ensure all changes are properly staged
- Verify GitHub push was successful
- Confirm backup was created successfully# Deploy Workflow Rules

## When user says "deploy", execute these steps in order:

### 1. Commit Changes
- Add all modified files to git staging
- Commit with descriptive message about the changes made
- Use format: "Description of changes - Brief summary"

### 2. Update GitHub
- Push all committed changes to GitHub remote repository
- Ensure main branch is updated with latest changes

### 3. Update GitHub Release
- Create a new GitHub release with version number
- Use semantic versioning (e.g., v1.2.3)
- Include changelog of what was fixed/added
- Tag the release appropriately

### 4. Make Git Backup
- Create timestamped backup folder: `git backups/YYYYMMDD-HHMMSS-deploy-backup/`
- Generate complete repository bundle
- Include commit history, git status, and backup info
- Store in `git backups/` directory

## Backup Naming Convention
- Format: `YYYYMMDD-HHMMSS-deploy-backup`
- Example: `20251003-235125-deploy-backup`
- Always include "deploy-backup" in the name

## Required Files in Each Backup
- `complete-repo.bundle` - Complete repository bundle
- `commit-history.txt` - Full commit history
- `git-status.txt` - Current git status
- `backup-info.txt` - Backup metadata with timestamp and description

## Execution Order
1. ✅ Commit changes
2. ✅ Push to GitHub
3. ✅ Create GitHub release
4. ✅ Generate git backup
5. ✅ Confirm all steps completed

## Notes
- Always check git status before committing
- Use meaningful commit messages
- Ensure all changes are properly staged
- Verify GitHub push was successful
- Confirm backup was created successfully