---
alwaysApply: true
description: HIFICOPY Website Tech Stack and Architecture Guide
---

# HIFICOPY Website Tech Stack & Architecture

## üéØ Website Overview

**HIFICOPY** is a premium 3D agency landing page built with cutting-edge web technologies to showcase premium DTC Klaviyo services. The website combines:

- **React 18** for component-based UI development
- **Vite** for lightning-fast development and builds
- **Tailwind CSS** for rapid, responsive styling
- **Spline 3D** for high-quality 3D animations and interactive elements
- **GSAP** for 2D animations and UI transitions

This architecture creates a visually stunning, performance-optimized 3D agency website that effectively converts visitors into leads through a "Book a Call" funnel with maximum visual impact.

## üèóÔ∏è Core Technology Stack

### **Backend Technologies**
- **Node.js** - JavaScript runtime for server-side development
  - File: [server.js](mdc:server.js)
  - Purpose: Web server and API endpoints
  - Port: 3001 (production), 3000 (development frontend)

- **Express.js** - Web application framework for Node.js
  - File: [server.js](mdc:server.js)
  - Purpose: HTTP request handling, middleware, routing, static file serving
  - Dependencies: compression, cors, helmet

### **Frontend Technologies**
- **React 18** - JavaScript library for building user interfaces
  - Purpose: Component-based UI development for single-page application
  - Features: Virtual DOM, component lifecycle, hooks, state management
  - Architecture: Modern React with functional components and hooks
  - Entry: [src/main.jsx](mdc:src/main.jsx)

- **Vite** - Next-generation frontend build tool
  - Purpose: Fast development server and optimized production builds
  - Config: [vite.config.js](mdc:vite.config.js)
  - Features: Hot module replacement, ES modules, optimized bundling

- **Tailwind CSS** - Utility-first CSS framework
  - Files: [src/index.css](mdc:src/index.css), [tailwind.config.js](mdc:tailwind.config.js)
  - Purpose: Rapid UI development, responsive design, utility classes
  - Integration: Seamlessly works with React components

- **Spline** - 3D design and animation platform
  - Purpose: High-quality 3D animations and interactive 3D elements
  - Integration: @splinetool/react-spline for React components
  - Use Case: Complex 3D visualizations in hero section
  - Features: Real-time 3D rendering, interactive 3D objects, WebGL optimization

### **Animation & Interactions**
- **GSAP (GreenSock)** - Professional 2D animation library
  - Integration: NPM package with React hooks
  - Files: [src/animation/useGSAP.js](mdc:src/animation/useGSAP.js)
  - Purpose: 2D animations, scroll triggers, timeline animations, UI transitions
  - Plugins: ScrollTrigger, Timeline
  - Scope: Handles all 2D animations and UI interactions

- **Spline + GSAP Integration** - Combined animation strategy
  - Purpose: Spline handles 3D animations, GSAP handles 2D UI animations
  - Workflow: Spline for complex 3D scenes, GSAP for page transitions and UI effects
  - Performance: Optimized rendering with WebGL (Spline) and DOM (GSAP)

### **Typography & Assets**
- **Google Fonts** - Web typography
  - Fonts: Inter (400, 600, 700), Bebas Neue
  - Implementation: Via Google Fonts CDN in [index.html](mdc:index.html)
  - Purpose: Brand typography, consistent font loading

### **Color System**
- **Primary Brand Colors** - Defined in Tailwind config
  - `hificopy-dark`: `#101010` - Primary dark background color (not pure black)
  - `hificopy-yellow`: `#f2ff00` - Primary accent color for CTAs and highlights
  - `hificopy-purple`: `#18075e` - Secondary brand color
  - `hificopy-purple2`: `#28223f` - Tertiary brand color
  - Implementation: Custom Tailwind colors in [tailwind.config.js](mdc:tailwind.config.js)
  - Usage: All dark backgrounds use `bg-hificopy-dark` (#101010) for consistency
  - Purpose: Maintains visual consistency and brand identity across all sections

### **Analytics & Tracking**
- **PostHog** - Product analytics and feature flags
  - Implementation: NPM package with React integration
  - Purpose: User behavior tracking, conversion analytics, A/B testing
  - API Key: phc_j21xoesJJQ69fRZgK2G7molLbHliftoCAvj9qlLB3C7

- **iClosed** - Lead capture and conversion tracking
  - Implementation: Widget script integration
  - Purpose: Lead capture forms, conversion tracking

### **SEO & Optimization**
- **Semrush** - SEO platform for keyword research and optimization
  - Purpose: Keyword research, position tracking, backlink gap analysis, site audit
  - Integration: Weekly site audits, keyword monitoring, competitor analysis
  - Target Keywords: Klaviyo agency, ecommerce email marketing, DTC retention, deliverability services

- **SEO On-Page Essentials** - Search engine optimization fundamentals
  - Meta Tags: Title (70 chars), Description (155 chars), canonical tag
  - OG/Twitter Cards: Full Open Graph + Twitter summary_large_image for social sharing
  - Schema Markup: JSON-LD (Organization, ProfessionalService, Website) in index.html
  - Sitemap & Robots: Auto-generated sitemap.xml and robots.txt for crawler guidance
  - Content Structure: Single H1, descriptive H2s (Problems, Solutions, Services, FAQs)
  - Performance: Web Vitals optimization (LCP < 2.5s, CLS < 0.1, INP < 200ms)

- **SEO Monitoring & Growth** - Ongoing optimization and tracking
  - Keyword Tracking: 10-15 primary queries monitored in Semrush position tracking
  - Backlink Outreach: Quarterly backlink gap campaigns against top Klaviyo competitors
  - Conversion Attribution: PostHog integration to measure which SEO traffic converts
  - Technical SEO: Regular crawl error fixes, metadata optimization, mobile-first indexing

## üìÅ Project Architecture

### **React + Vite Application Structure**
hificopy/
‚îú‚îÄ .cursor/
‚îÇ  ‚îî‚îÄ rules/
‚îÇ     ‚îú‚îÄ hificopy-website-info.mdc
‚îÇ     ‚îú‚îÄ tech-stack.mdc
‚îÇ     ‚îî‚îÄ folder-structure.mdc
‚îú‚îÄ .github/
‚îÇ  ‚îî‚îÄ workflows/
‚îÇ     ‚îî‚îÄ ci.yml                # lint + build check on PRs
‚îú‚îÄ public/                     # static assets served as-is
‚îÇ  ‚îú‚îÄ og-image.jpg
‚îÇ  ‚îú‚îÄ favicon.ico
‚îÇ  ‚îú‚îÄ robots.txt
‚îÇ  ‚îú‚îÄ sitemap.xml
‚îÇ  ‚îú‚îÄ security.txt
‚îÇ  ‚îî‚îÄ humans.txt
‚îú‚îÄ src/
‚îÇ  ‚îú‚îÄ app/                     # app shell + providers
‚îÇ  ‚îÇ  ‚îú‚îÄ App.jsx
‚îÇ  ‚îÇ  ‚îî‚îÄ providers/            # analytics, motion, theme providers
‚îÇ  ‚îÇ     ‚îú‚îÄ AnalyticsProvider.jsx
‚îÇ  ‚îÇ     ‚îî‚îÄ MotionProvider.jsx
‚îÇ  ‚îú‚îÄ sections/                # page sections in order of appearance
‚îÇ  ‚îÇ  ‚îú‚îÄ Hero/
‚îÇ  ‚îÇ  ‚îÇ  ‚îú‚îÄ Hero.jsx
‚îÇ  ‚îÇ  ‚îÇ  ‚îî‚îÄ Hero.gsap.js      # timeline for this section only
‚îÇ  ‚îÇ  ‚îú‚îÄ TestimonialsBar/‚Ä¶
‚îÇ  ‚îÇ  ‚îú‚îÄ ProblemsSection/‚Ä¶
‚îÇ  ‚îÇ  ‚îú‚îÄ SolutionsSection/‚Ä¶
‚îÇ  ‚îÇ  ‚îú‚îÄ ServicesSection/‚Ä¶
‚îÇ  ‚îÇ  ‚îî‚îÄ CTASection/‚Ä¶
‚îÇ  ‚îú‚îÄ components/              # small, reusable UI primitives
‚îÇ  ‚îÇ  ‚îú‚îÄ Button.jsx
‚îÇ  ‚îÇ  ‚îú‚îÄ Container.jsx
‚îÇ  ‚îÇ  ‚îî‚îÄ Navigation.jsx
‚îÇ  ‚îú‚îÄ animation/               # GSAP hooks & shared timelines
‚îÇ  ‚îÇ  ‚îú‚îÄ useGSAP.js
‚îÇ  ‚îÇ  ‚îî‚îÄ scroll.js             # helpers (pin, scrub, reduced-motion guards)
‚îÇ  ‚îú‚îÄ spline/                  # 3D is isolated and optional
‚îÇ  ‚îÇ  ‚îú‚îÄ SplineScene.jsx       # lazy-loaded, respects reduced motion
‚îÇ  ‚îÇ  ‚îî‚îÄ assets/               # .spline or poster images
‚îÇ  ‚îú‚îÄ lib/                     # utilities that aren't React-specific
‚îÇ  ‚îÇ  ‚îú‚îÄ analytics.js          # PostHog init + capture helpers
‚îÇ  ‚îÇ  ‚îú‚îÄ seo.js                # build JSON-LD, meta tags
‚îÇ  ‚îÇ  ‚îî‚îÄ utm.js                # UTM registration + storage
‚îÇ  ‚îú‚îÄ hooks/                   # generic React hooks
‚îÇ  ‚îÇ  ‚îú‚îÄ useUTM.js
‚îÇ  ‚îÇ  ‚îî‚îÄ useReducedMotionPref.js
‚îÇ  ‚îú‚îÄ styles/
‚îÇ  ‚îÇ  ‚îî‚îÄ index.css             # Tailwind base + tokens
‚îÇ  ‚îú‚îÄ data/                    # tiny JSON/config for content tokens
‚îÇ  ‚îÇ  ‚îú‚îÄ links.json            # scheduler, typeform, social
‚îÇ  ‚îÇ  ‚îî‚îÄ metrics.json          # anonymized proof numbers
‚îÇ  ‚îî‚îÄ main.jsx                 # React entry
‚îú‚îÄ .env.example
‚îú‚îÄ assets/                  # static assets (fonts, images, icons)
‚îú‚îÄ eslint.config.js         # ESLint configuration
‚îú‚îÄ dist/                    # build output (generated)
‚îú‚îÄ git backups/             # backup files (not in production)
‚îú‚îÄ index.html               # meta/OG/LD+JSON; React mount
‚îú‚îÄ package.json
‚îú‚îÄ postcss.config.js
‚îú‚îÄ resources/               # additional resources
‚îú‚îÄ server.js                # Express server
‚îú‚îÄ tailwind.config.js
‚îú‚îÄ vite.config.js
‚îî‚îÄ README.md

## üéØ Technology Use Cases

### **UI Development Strategy**
- **React**: Component-based architecture for single-page application
  - Reusable UI components for consistent design
  - State management for interactive elements
  - Component lifecycle for performance optimization
  - Hooks for state and side effects management

- **Tailwind CSS**: Primary styling framework for rapid development
  - Utility classes for layout, spacing, colors
  - Responsive design with breakpoints
  - Custom configuration for brand colors
  - Seamless integration with React components

- **Custom CSS**: Component-specific styling and overrides
  - Complex animations and transitions
  - Brand-specific styling not covered by Tailwind
  - React component-specific styling

### **Animation Strategy**
- **Spline**: 3D animations and interactive elements
  - Complex 3D visualizations and scenes
  - Interactive 3D objects and environments
  - WebGL-optimized 3D rendering
  - 3D animations that GSAP cannot handle
  - Integration with React components for seamless UI

- **GSAP**: 2D animations and UI interactions
  - Page transitions and scroll-triggered animations
  - Complex timeline animations
  - UI element animations and micro-interactions
  - Performance-optimized 2D animations

- **CSS Transitions**: Simple hover effects and micro-interactions
  - Button hover states
  - Card hover effects
  - Smooth transitions

### **Development Workflow**
- **React Development**: `npm start` - React development server with hot reload
- **CSS Building**: Tailwind compilation with watch mode
- **Spline Integration**: 3D scenes exported and integrated as React components
- **Production Build**: `npm run build` - Optimized React build with minified assets

## üîß Key Dependencies

### **Production Dependencies**
- `react`: UI library for component-based development
- `react-dom`: React DOM rendering
- `@splinetool/react-spline`: Spline 3D integration for React
- `express`: Web framework
- `compression`: Gzip compression
- `cors`: Cross-origin resource sharing
- `helmet`: Security headers
- `gsap`: 2D animation library
- `posthog-js`: Analytics tracking
- `dotenv`: Environment variables

### **Development Dependencies**
- `@vitejs/plugin-react`: Vite React plugin for fast development
- `tailwindcss`: CSS framework
- `concurrently`: Run multiple commands
- `nodemon`: Auto-restart server

## üìã Development Guidelines

### **When to Use Each Technology**
- **React**: Component development, state management, UI interactions, 3D scene integration
- **Vite**: Development server, production builds, hot module replacement
- **Tailwind CSS**: Layout, spacing, colors, responsive design
- **Spline 3D**: Hero section 3D scenes, interactive 3D elements, premium visual impact
- **GSAP**: 2D animations, scroll triggers, UI transitions, timeline animations
- **Custom CSS**: Complex animations, brand-specific styling, React component styling
- **PostHog**: User tracking, conversion analytics, A/B testing
- **iClosed**: Lead capture, form submissions
- **Semrush**: SEO keyword research, position tracking, site audits, competitor analysis
- **SEO Tools**: Meta tags, schema markup, sitemap generation, performance optimization

### **3D Agency Landing Page Features**
- **Spline 3D Integration**: Interactive 3D hero scenes for premium brand differentiation
- **React Components**: Modular 3D scene components for easy maintenance
- **Performance Optimization**: WebGL-optimized 3D rendering with React integration
- **Mobile Responsive**: 3D elements adapt to different screen sizes
- **Accessibility**: Motion-reduced mode support for 3D animations

### **File Naming Conventions**
- React components: `PascalCase.jsx` or `PascalCase.tsx`
- CSS files: `kebab-case.css`
- JavaScript files: `camelCase.js`
- HTML files: `kebab-case.html`
- Configuration files: `kebab-case.config.js`
- Spline files: `kebab-case.spline`

### **Code Organization**
- Organize React components by feature or functionality
- Keep Spline 3D scenes separate from 2D animations
- Use React hooks for state management and side effects
- Follow mobile-first responsive design
- Optimize for performance and accessibility
- Separate 3D (Spline) and 2D (GSAP) animation concerns